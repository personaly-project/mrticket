/** @format */

import { ITicket } from "@/lib/types";
import {
  CardElement,
  Elements,
  useElements,
  useStripe,
} from "@stripe/react-stripe-js";
import { loadStripe } from "@stripe/stripe-js";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { IoIosLock } from "react-icons/io";

interface IPageProps {
  ticketId: string | undefined;
  allTickets: ITicket[] | undefined;
}

const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_SECRET!);

export function StripeCheckout({ ticketId, allTickets }: IPageProps) {
  interface IStripe {
    sessionId: string;
    publishableKey: string;
  }

  return (
    <>
      <Head>
        <title>Checkout</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {stripePromise && (
          <Elements stripe={stripePromise}>
            <CheckoutForm ticketid={ticketId} allTickets={allTickets} />
          </Elements>
        )}
      </main>
    </>
  );
}

interface checkoutProps {
  ticketid: string | undefined;
  allTickets: ITicket[] | undefined;
}
export const CheckoutForm: React.FC<checkoutProps> = ({
  ticketid,
  allTickets,
}) => {
  const [paymentIntent, setPaymentIntent] = useState<any>(null);
  const stripe = useStripe();
  const elements = useElements();
  const [clientSecret, setClientSecret] = useState<string | null>(null);
  const [email, setEmail] = useState<string>("");
  const router = useRouter();

  useEffect(() => {
    const getPaymentData = async () => {
      const priceToPay: ITicket | undefined = allTickets?.find(
        (ticket) => ticket.id === ticketid
      );
      priceToPay?.price;

      if (!priceToPay) {
        console.log("priceToPay is null");
        return;
      }

      const data = await fetch("/api/payment", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          amount: priceToPay,
        }),
      }).then((res) => res.json());

      const stripe = await stripePromise;
      setClientSecret(data.clientSecret);

      if (stripe === null) {
        console.log("stripe is null");
        return;
      }
      const currentPaymentIntent = await stripe.retrievePaymentIntent(
        data.clientSecret
      );

      setPaymentIntent(currentPaymentIntent.paymentIntent);
    };

    getPaymentData();
    console.log("paymentIntent", paymentIntent, ticketid, allTickets);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    if (!stripe || !elements) {
      return;
    }

    const cardElement = elements.getElement(CardElement);
    if (!cardElement) {
      console.log("[error] CardElement is not yet retrieved");
      return;
    }
    //stripe card element
    const { error, paymentMethod } = await stripe.createPaymentMethod({
      type: "card",
      card: cardElement,
    });

    if (error) {
      console.log("[error]", error);
      return;
    }

    if (!paymentIntent) {
      console.log("[error] PaymentIntent is not yet retrieved");
      return;
    }
    if (!clientSecret) {
      console.log("[error] clientSecret is not yet retrieved");
      return;
    }

    const confirmCardPayment = await stripe.confirmCardPayment(clientSecret, {
      payment_method: paymentMethod.id,
    });

    if (confirmCardPayment.error) {
      confirmCardPayment.error.message;
      console.log("[error]", confirmCardPayment.error);
    } else {
      // The payment has been processed!
      confirmCardPayment.paymentIntent.status;

      return router.push(`/ticket/${ticketid}/success`);
    }
  };

  return (
    <div className="min-h-screen bg-purple-dark text-white flex flex-row justify-center">
      {/* container */}
      <div className="flex flex-row justify-center m-auto  min-w-full gap-1">
        {/* payment box */}
        <div className="bg-white border-2 border-white rounded-xl w-96">
          <div className="text-2xl font-light text-purple-dark text-center p-6">
            Finish your payment
          </div>
          <form
            onSubmit={handleSubmit}
            className="mt-4 p-10 flex flex-col m-auto gap-6"
          >
            {" "}
            <input
              type="email"
              placeholder="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className=" p-1 border-b-2 border-[#e5e5e5]  text-black"
            />
            <CardElement
              options={{
                style: {
                  base: {
                    padding: "6rem",
                    fontSize: "16px",
                    color: "#424770",
                    "::placeholder": {
                      color: "#aab7c4",
                    },
                  },
                  invalid: {
                    color: "#9e2146",
                  },
                },
              }}
            />
            <button
              type="submit"
              className="bg-purple-medium text-white p-3 border-0 rounded-full text-lg w-100% flex flex-row items-center gap-1 justify-center"
              disabled={!stripe}
            >
              <IoIosLock size={20} />
              Pay
            </button>
            <Image
              width={100}
              height={100}
              src="https://www.paypalobjects.com/webstatic/mktg/logo/AM_mc_vs_dc_ae.jpg"
              alt="visa"
            />
          </form>
        </div>

        {/* total box */}
        <div className="bg-white border-0 rounded-xl text-start text-black p-8 h-32 w-42 flex flex-col gap-4 justify-center">
          <div className="flex flex-col justify-center text-start">
            <h2 className="font-bold text-xs text-black ">TOTAL</h2>
            <div className="font-light text-3xl text-purple-medium">
              <p className="font-light text-3xl">$ {paymentIntent.amount},00</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
